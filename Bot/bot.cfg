
# This is the URL of the gameroom to connect to.
$C{grUrl} = "http://arimaa.com/arimaa/gameroom";

# This is used to login to the gameroom
#   You first need to create an account in the Arimaa gameroom
#   for the bot.  The username for bot account must begin with bot_.
#   See the README.1st file for info on creating a bot account.
$C{login} = "bot_et";
$C{passwd} = "etet";

# This is the path and filename of the program to generate
#   the moves for the bot.  A sample program is provided.
#   See the README.getMove file for more info about getMove.
$C{getMove} = "python ../final/Driver.py";
# On windows use, you may need to uncomment the following line
#   to get the sample getMove program to run
#$C{getMove} = "perl ./getMove";

# This is used to pass more arguments to the getMove program
#   First three arguments are the positionFile, moveList and gameState
#   The arguments set in moreArgs are passed after these three.
# For example maybe the fourth argument tells getMove how many
#   steps deep to search.
#$C{moreArgs} = "4";

# This is the path and filename of the bot prog; you dont need
#   to change this.
$C{bot} = "./bot";
# On windows use, you will need to uncomment the following line
#   so that your perl interpeter can run the bot script.
#$C{bot} = "perl ./bot";

# This is the chat message that your bot will give at the
#   start of the game.  It should include the name and
#   email of the bot owner.  Remember to put a \ before the
#   @ in your email address.
$C{hello} = qq(
Hi. I'm just the sample bot, so don't try chatting with me or playing with me. If you encounter any problems notify: eric.l.m.thomas at gmail.com. 
);

$C{info} = qq(
Information about this bot which will be shown on the bot control page.
Like how deep it searches, how long it takes to move, etc.
);

# These are the default settings to use when creating new games
#   For info on the timecontrol format see:
#   http://arimaa.com/arimaa/learn/matchRules.html
#   Bots should only play interactive games and not postal games
$C{timecontrol} = "2/2/100/2/0";
# Keep this set to 0 until your bot starts winning some
#   games against humans.  Then you can set it to 1
#   to start playing rated games.
$C{rated} = 0;
# This sets how many simultanious games the bot can play
#   I recommend leaving it at 1.
# On windows setting this to number more than 1 has no
#   effect since the system command can't start a process
#   in the background.
$C{maxBots} = 1;

# Add a small delay so that it does not move so fast on non-setup moves.
#   If the bot makes the move in less then the delay value then we
#   pause a little so that the total move time will be equal to the
#   delay value. If the bot takes longer than the delay value to 
#   figure out it's move then we do not pause at all.
#   This can be set to larger values so that it appears as if the
#   bot is thinking. But be careful it does not go over the time per move.
# 
$C{delay} = 5;

# Run a post game program. If this is set to point to a program
#   then the program is run after the bot finishes the game.
#   Such a program can be used to update a database or allow the
#   bot to modify itself. Note that if multiple bots are running
#   each will cause the post game program to run, so the post game
#   program should be careful if it updates files; since multiple
#   copies of it can be running at the same time, if multiple
#   bots are running.
#   Might need to use a full path on some systems.
# $C{postGameProg} = "./saveGame";
$C{postGameProg} = "";

# Setting watch=1 causes the bot to print what is happening
#   as it plays the game.
$C{watch} = 1;

# Setting saveGame=1 causes the game moves to be saved to $$.gameLog 
# file in the logs directory.
$C{saveGame} = 1;

# Setting debug=1 causes logging to the $$.netLog file in the logs dir.
$C{debug} = 0;

# Defines the dir where the *.netLog and *.gameLog files are written
#   Make sure you create this directory before running the bot
$C{logDir} = "./logs";

# Defines the dir where temporary file used to track which games
#   are being played and files to pass to getMove are written 
$C{runDir} = "./running";

# Setting client=1 causes the bot to prompt the user
#   for the next move rather then invoking getMove.
#   This mode can be used to turn the bot into an Arimaa
#   client to connect to the gameroom and play games.
#   This was used for debugging.  You should not 
#   change this.
$C{client} = 0;

1;


